// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cfCore_2.context;

#nullable disable

namespace cfCore_2.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241006150018_m0")]
    partial class m0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("cfCore_2.Entity.ChoosedFeatures", b =>
                {
                    b.Property<int>("featureId")
                        .HasColumnType("int");

                    b.Property<int>("tickettId")
                        .HasColumnType("int");

                    b.HasKey("featureId", "tickettId");

                    b.HasIndex("tickettId");

                    b.ToTable("ChoosedFeatures");
                });

            modelBuilder.Entity("cfCore_2.Entity.Event_Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categeory")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsNumb")
                        .HasColumnType("int");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<DateTime>("SoldOut")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TotalMoney")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewerNum")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<string>("place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("cfCore_2.Entity.Features", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ParticipateNumber")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("eventId")
                        .HasColumnType("int");

                    b.Property<int>("limit")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("eventId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("cfCore_2.Entity.PrivateQuestion", b =>
                {
                    b.Property<int>("eventId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("eventId", "Question");

                    b.ToTable("PrivateQuestions");
                });

            modelBuilder.Entity("cfCore_2.Entity.Tickett", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SubscriptionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("eventId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("eventId");

                    b.HasIndex("userId");

                    b.ToTable("Ticketets");
                });

            modelBuilder.Entity("cfCore_2.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("cfCore_2.Entity.ChoosedFeatures", b =>
                {
                    b.HasOne("cfCore_2.Entity.Features", "features")
                        .WithMany()
                        .HasForeignKey("featureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cfCore_2.Entity.Tickett", "tickett")
                        .WithMany()
                        .HasForeignKey("tickettId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("features");

                    b.Navigation("tickett");
                });

            modelBuilder.Entity("cfCore_2.Entity.Event_Class", b =>
                {
                    b.HasOne("cfCore_2.Entity.User", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("cfCore_2.Entity.Features", b =>
                {
                    b.HasOne("cfCore_2.Entity.Event_Class", "Event_Class")
                        .WithMany()
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Class");
                });

            modelBuilder.Entity("cfCore_2.Entity.PrivateQuestion", b =>
                {
                    b.HasOne("cfCore_2.Entity.Event_Class", "Event_Class")
                        .WithMany()
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Class");
                });

            modelBuilder.Entity("cfCore_2.Entity.Tickett", b =>
                {
                    b.HasOne("cfCore_2.Entity.Event_Class", "Event_Class")
                        .WithMany("ticketts")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("cfCore_2.Entity.User", "user")
                        .WithMany("ticketts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event_Class");

                    b.Navigation("user");
                });

            modelBuilder.Entity("cfCore_2.Entity.Event_Class", b =>
                {
                    b.Navigation("ticketts");
                });

            modelBuilder.Entity("cfCore_2.Entity.User", b =>
                {
                    b.Navigation("ticketts");
                });
#pragma warning restore 612, 618
        }
    }
}
