// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace efPower.Models;

public partial class Event02Context : DbContext
{
    public Event02Context(DbContextOptions<Event02Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<Feature> Features { get; set; }

    public virtual DbSet<PrivateQuestion> PrivateQuestions { get; set; }

    public virtual DbSet<Ticketet> Ticketets { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasIndex(e => e.OrgId, "IX_Events_OrgId");

            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Details).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Place)
                .IsRequired()
                .HasColumnName("place");
            entity.Property(e => e.Url).IsRequired();

            entity.HasOne(d => d.Org).WithMany(p => p.Events)
                .HasForeignKey(d => d.OrgId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Feature>(entity =>
        {
            entity.HasIndex(e => e.EventId, "IX_Features_eventId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.EventId).HasColumnName("eventId");
            entity.Property(e => e.Limit).HasColumnName("limit");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasColumnName("title");

            entity.HasOne(d => d.Event).WithMany(p => p.Features)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasMany(d => d.Ticketts).WithMany(p => p.Features)
                .UsingEntity<Dictionary<string, object>>(
                    "ChoosedFeature",
                    r => r.HasOne<Ticketet>().WithMany()
                        .HasForeignKey("TickettId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Feature>().WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("FeatureId", "TickettId");
                        j.ToTable("ChoosedFeatures");
                        j.HasIndex(new[] { "TickettId" }, "IX_ChoosedFeatures_tickettId");
                        j.IndexerProperty<int>("FeatureId").HasColumnName("featureId");
                        j.IndexerProperty<int>("TickettId").HasColumnName("tickettId");
                    });
        });

        modelBuilder.Entity<PrivateQuestion>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.Question });

            entity.Property(e => e.EventId).HasColumnName("eventId");

            entity.HasOne(d => d.Event).WithMany(p => p.PrivateQuestions)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Ticketet>(entity =>
        {
            entity.HasIndex(e => e.EventId, "IX_Ticketets_eventId");

            entity.HasIndex(e => e.UserId, "IX_Ticketets_userId");

            entity.Property(e => e.EventId).HasColumnName("eventId");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Event).WithMany(p => p.Ticketets)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.Ticketets)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.Fname)
                .IsRequired()
                .HasColumnName("FName");
            entity.Property(e => e.Lname)
                .IsRequired()
                .HasColumnName("LName");
            entity.Property(e => e.Password).IsRequired();
            entity.Property(e => e.Phone).IsRequired();
            entity.Property(e => e.Role).HasColumnName("role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}